package gt.research.dc.core.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INTF".
*/
public class IntfDao extends AbstractDao<Intf, String> {

    public static final String TABLENAME = "INTF";

    /**
     * Properties of entity Intf.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Intf = new Property(0, String.class, "intf", true, "INTF");
        public final static Property Impl = new Property(1, String.class, "impl", false, "IMPL");
        public final static Property Apk = new Property(2, String.class, "apk", false, "APK");
    };


    public IntfDao(DaoConfig config) {
        super(config);
    }
    
    public IntfDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INTF\" (" + //
                "\"INTF\" TEXT PRIMARY KEY NOT NULL ," + // 0: intf
                "\"IMPL\" TEXT NOT NULL ," + // 1: impl
                "\"APK\" TEXT NOT NULL );"); // 2: apk
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_INTF_INTF ON INTF" +
                " (\"INTF\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INTF\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Intf entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getIntf());
        stmt.bindString(2, entity.getImpl());
        stmt.bindString(3, entity.getApk());
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Intf readEntity(Cursor cursor, int offset) {
        Intf entity = new Intf( //
            cursor.getString(offset + 0), // intf
            cursor.getString(offset + 1), // impl
            cursor.getString(offset + 2) // apk
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Intf entity, int offset) {
        entity.setIntf(cursor.getString(offset + 0));
        entity.setImpl(cursor.getString(offset + 1));
        entity.setApk(cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Intf entity, long rowId) {
        return entity.getIntf();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Intf entity) {
        if(entity != null) {
            return entity.getIntf();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
